/**
 * 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。
 * 输入n，打印出s的所有可能的值出现的概率。

你需要用一个浮点数数组返回答案，
其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

示例 1:

输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
示例 2:

输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]

限制：

1 <= n <= 11

k神解题方法：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/solution/jian-zhi-offer-60-n-ge-tou-zi-de-dian-sh-z36d/

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
/**
 * 设n个骰子的解为f(n)，和为x的概率为f(n, x).
 * 假设n-1个骰子的解为f(n - 1), 此时添加一枚骰子，n个骰子和为x的概率为f(n, x).
 * 当添加的骰子为1点时，n-1个骰子的点数为x - 1才能组成点数和x。同理，骰子点数为2
 * 时，n - 1个骰子的点数为x - 2才能组成点数x。以此类推，直到该骰子的点数到6，将
 * 这6种情况的概率相加，即可得到f(n, x)的概率
 * f(n, x) = f(n - 1, 1) * 1 / 6 + f(n - 1, 2) * 1 / 6 ... f(n - 1, 6) * 1 / 6
 * f(n - 1, x - i) * 1 / 6, i 取值【1，6】区间。
 * 
 * 由于新增的骰子数点数只能是1 - 6，因此f(n - 1, x)只跟f(n, x + 1), f(n, x + 1)...f(n, 6)
 * 相关。因此遍历f(n - 1)各点数和的概率，并将其相加到f(n)的相关项中，即完成f(n - 1)至f(n)的递推。
 * 
 * 通常做法是声明一个二维数组dp, dp[i][j]代表前i个骰子的点数和j的概率，并执行状态转移。
 * 由于dp[i]仅与dp[i - 1]递推得出，为了降低复杂度，只建立两个一维数组dp, tmp交替前进即可。
 * 
 */
/**
 * @param {number} n
 * @return {number[]}
 */
var dicesProbability = function(n) {
  let dp = Array.from({length: 6}, () => 1 / 6.0);
  for (let i = 2; i <= n; i++) {
    // n个骰子时，结果的个数有6n - n + 1
    let tmp = Array.from({length: 5 * i + 1}, () => 0);
    for (let j = 0; j < dp.length; j++) {
      for (let k = 0; k < 6; k++) {
        tmp[j + k] += dp[j] / 6.0;
      }
    }
    dp = tmp;
  }
  return dp;
};
